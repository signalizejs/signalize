export class Signalize{#t=new Set;#i={};#o=!1;root;attributeSeparator;attributePrefix;componentPrefix;globals;constructor(t={}){this.root=t?.root??document;const i=[];if(void 0===this.root?.__signalize){this.root.__signalize=this;(async()=>{this.attributePrefix=t?.attributePrefix??"",this.attributeSeparator=t?.attributeSeparator??"-",this.componentPrefix=t?.componentPrefix??"",this.globals={...this.globals,...t?.globals??{}};const{customEventListener:o,observeMutations:s}=await this.import(["on","mutation-observer"]);for(o("signalize:ready",(({listener:t})=>{this.#o?t(this):i.push(t)}));i.length>0;)i.shift()();this.root.__signalize=this,this.#o=!0,s(this.root,((t,i)=>{if(!(i instanceof Element))return;const{dispatch:o}=this.import("signalizejs/dispatch");o(t,i)}))})()}else{const i=this.root.__signalize;i.globals={...i.globals,...t?.globals??{}}}return this.root.__signalize}imports(t){this.#i={...this.#i,...t}}import=async t=>{const i="string"==typeof t?t.split(" "):t;let o=[];for(let t=0;t<i.length;t++){const s=i[t];let e=this.#i[s];e in this.#i&&(e=this.#i[e]),void 0===e&&(e=`./modules/${s}.js`),o.push(new Promise((async(o,r)=>{try{o((await import(e)).default({$:this,options:this.#t[i[t]]??{}}))}catch(t){r(`Module '${s}' could not be loaded in import path(${e}). ${t}`)}})))}o=await Promise.all(o);let s={};for(const t of o)s={...s,...t};return s}}export default Signalize;